# <4> 1이 될 때까지

# my solution1
"""
n, k = map(int, input().split())
answer = 0

while n != 1:
    while n % k == 0:
        n = n // k
        answer += 1
        if n == 1:
            break
    if n == 1:
        break
    while n % k != 0:
        n -= 1
        answer += 1
        if n == 1:
            break

print(answer)
"""

# my solution2 : 3-6 답안 예시를 참조하여 다시 풀어본 my solution 입니다..!!
"""
n, k = map(int, input().split())

answer = 0

while n >= k: # <<-- n >= k까지만 반복문을 돌아야 하는 이유는
    target = (n // k) * k # 이 행에서 알 수 있듯이 만약 n < k라면 target = 0이 되어서 잘못 연산을 수행할 수 있기 때문입니다..!!
    answer += (n - target)
    n = target
    while n % k == 0:
        n //= k
        answer += 1

while n!= 1:
    n -= 1
    answer += 1

print(answer)
"""

# "문제 해설"
# 이 문제 또한 문제 해결을 위한 아이디어를 떠올릴 수 있으면 어렵지 않게 해결할 수 있다.
# 주어진 N에 대하여 "최대한 많이 나누기"를 수행하면 된다.
# 왜냐하면 어떠한 수가 있을 때, "2이상의 수로 나누는 것"이 "1을 빼는 것"보다 숫자를 훨씬 많이 줄일 수 있기 때문이다.
# 문제에서는 K가 2 이상의 자연수이므로, 가능하면 나누는 것이 항상 더 숫자를 빠르게 줄이는 방법이 된다.
# ....
# 그러므로 K로 가능한 한 많이 나눴을 때 가장 빠르게 N = 1을 만들 수 있다.
# 따라서 다음의 과정을 반복할 수 없을 때까지 반복하면 정답을 구할 수 있다.
# .....................
# 1. N이 K의 배수가 될 때까지 1씩 빼기
# 2. N을 K로 나누기
# .....................
# ....
# 다시 말해 N이 클수록 K로 나누었을 때 줄어드는 양이 더 많다.
# N이 처음엔 큰 수라고 해도 나누기를 수행하면서 크기가 빠르게 줄어든다.
# 다시 말해 K가 2 이상이기만 하면 K로 나누는 것이 1을 빼는 것보다 항상 빠르게 N의 값을 줄일 수 있으며,
# N이 결국 1에 도달한다는 것을 알 수 있다.
# 그러므로 K로 최대한 많이 나눌 수 있도록 하는 것이 최적의 해를 보장하는 것이다.
# 파이썬을 이용해 작성한 답안 예시는 다음과 같다.

# 3-5.py 단순하게 푸는 답안 예시
"""
n, k = map(int, input().split())
result = 0

# N이 K 이상이라면 K로 계속 나누기
while n >= k:
    # N이 K로 나누어 떨어지지 않는다면 N에서 1씩 빼기
    while n % k != 0:
        n -= 1
        result += 1
    # K로 나누기
    n //= k
    result += 1

# 마지막으로 남은 수에 대하여 1씩 빼기
while n > 1:
    n -= 1
    result += 1

print(result)
"""
# 문제에서는 N의 범위가 10만 이하이므로, 이처럼 일일이 1씩 빼도 문제를 해결할 수 있다.
# -->> "하지만 N이 100억 이상의 큰 수가 되는 경우를 가정했을 때에도 빠르게 동작하려면, 'N이 K의 배수가 되도록 효율적으로 한 번에 빼는 방식'으로 '소스코드를 작성'해야 한다..!!"

# 3-6.py 답안 예시
"""
# N, K를 공백으로 구분하여 입력받기
n, k = map(int, input().split())
result = 0

while True:
    # (N == K로 나누어 떨어지는 수)가 될 때까지 1씩 빼기
    target = (n // k) * k
    result += (n - target)
    n = target
    # N이 K보다 작을 때(더 이상 나눌 수 없을 때) 반복문 탈출
    if n < k:
        break
    # K로 나누기
    result += 1
    n //= k

# 마지막으로 남은 수에 대하여 1씩 빼기
result += (n - 1)
print(result)
"""
