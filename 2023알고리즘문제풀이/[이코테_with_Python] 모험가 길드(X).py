# <Q01> 모험가 길드

# my solution(X)
# -->> 다음에 다시 한번 더 풀어볼 것..!!

# <A01> 모험가 길드
# 일단 공포도를 기준으로 오름차순으로 정렬을 수행해보자. 이후에 공포도가 가장 낮은 모험가부터 하나씩 확인하며, 그룹에 포함될 모험가의 수를 계산할 수 있다.
# 만약에 현재 그룹에 포함된 모험가의 수가 현재 확인하고 있는 공포도보다 크거나 같다면, 그룹을 결성할 수 있을 것이다.
# 예를 들어 문제에서의 예시 입력을 그림으로 표현하면 다음과 같다.
# [2, 3, 1, 2, 2]
# 가장 먼저 5명의 공포도를 오름차순으로 정렬하면 다음과 같이 구성된다.
# [1, 2, 2, 2, 3]
# 이제 앞에서부터 공포도를 하나씩 확인하며, "현재 그룹에 포함된 모험가의 수"가 "현재 확인하고 있는 공포도"보다 크거나 같다면, 이를 그룹으로 설정하면 된다.
# 현재 예시에서는 다음과 같이 2개의 그룹이 형성된다.
# 그룹1 : [1]
# 그룹2 : [1, 2]
# x
# 이러한 방법을 이용하면 공포도가 오름차순으로 정렬되어 있다는 점에서, 항상 최소한의 모험가의 수만 포함하여 그룹을 결성하게 된다.
# 따라서 최대한 많은 그룹이 구성되는 방법이므로,
# 항상 최적의 해를 찾을 수 있다.
# 이를 소스코드로 나타내면 다음과 같다.

# A01.py 답안 예시

n = int(input())
data = list(map(int, input().split()))
data.sort()

result = 0 # 총 그룹의 수

count = 0 # 현재 그룹에 포함된 모험가의 수

for i in data: # 공포도를 낮은 것부터 하나씩 확인하며
    count += 1 # 현재 그룹에 해당 모험가를 포함시키기
    if count >= i: # 현재 그룹에 포함된 모험가의 수가 현재의 공포도 이상이라면, 그룹 결성
        result += 1 # 총 그룹의 수 증가시키기
        count = 0 # 현재 그룸에 포함된 모험가의 수 초기화

print(result)
