# <3> 개미 전사

# 문제 해설
# 이 문제 또한 그림으로 도식화한 뒤에 생각하면 어렵지 않다. 예를 들어 N이 4이고 차례대로 식량이 1, 3, 1, 5만큼 들어 있다고 가정하자. 그렇다면 식량을 선택할 수 있는 경우의 수는 다음 그림처럼 8이다.
# 또한 7번째 경우에서 총 8만큼의 식량을 얻을 수 있기 때문에 정답은 8이다.
# 그럼 이 문제의 점화식은 어떻게 세울까?
# 처음 이 문제를 접했을 때는 문제 풀이를 위한 아이디어를 떠올리기 어려울 수 있지만 왼쪽부터 차례대로 식량창고를 턴다고 가정하면 어렵지 않게 점화식을 세울 수 있다.
# 왼쪽부터 차례대로 식량창고를 털지 안 털지를 결정하는 경우와 특정한 i번째 식량창고에 대해서 털지 안 털지의 여부를 결정할 때, 단 2가지 경우에 대해서만 확인하면 된다.
# (a) (i - 1)번째 식량창고를 털기로 결정한 경우 현재의 식량창고는 털 수 없다.
# (b) (i - 2)번째 식량창고를 털기로 결정한 경우 현재의 식량창고를 털 수 있다.
# 따라서 (a) 와 (b) 중에서 더 많은 식량을 털 수 있는 경우를 선택하면 된다.
# 그림으로 보았을 때는 색칠한 식량창고에서 식량을 얻을 수 있는 것이다.
# 여기서 알아둘 점은 i번째 식량창고에 대한 최적의 해를 구할 때 왼쪽부터 (i-3)번째 이하의 식량창고에 대한 최적의 해에 대해서는 고려할 필요가 없다는 점이다.
# 예를 들어 d[i - 3]는 d[i - 1]과 d[i - 2]를 구하는 과정에서 이미 계산되었기(고려되었기) 때문에, d[i]의 값을 구할 때는 d[i - 1] 과 d[i - 2]만 고려하면 된다.
# 따라서 i번째 식량창고에 있는 식량의 양이 k(i)라고 했을 때 점화식은 다음과 같다.
# -->> "a(i) = max(a(i-1), a(i-2) + k(i))"
# 보텀업 방식의 풀이를 살펴보면 다음과 같다.

# 8-6.py 답안 예시
"""
# 정수 N을 입력받기
n = int(input())
# 모든 식량 정보 입력받기
array = list(map(int, input().split()))

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * (100) # 참고 > -->> 3 <= N <= 100

# 다이나믹 프로그래밍(Dynamic Programming) 진행(보텀업)
d[0] = array[0]
d[1] = max(array[0], array[1])

for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + array[i])

# 계산된 결과 출력
print(d[n - 1])
"""
