# <2> 1로 만들기

# my solution
x = int(input())

d = [0] * (x + 1)

d[1] = 0

for i in range(2,x + 1):
    d[i] = d[i - 1] + 1
    if i % 2 == 0:
        d[i] = min(d[i], d[i // 2] + 1)
    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)
    if i % 5 == 0:
        d[i] = min(d[i], d[i // 5] + 1)

print(d[x])

# 문제 해설
# 이 문제는 잘 알려진 다이나믹 프로그래밍 문제이다.
# 피보나치 수열 문제를 도식화했던 것처럼 문제를 풀기 전에 함수가 호출되는 과정을 그림으로 그려보면 이해하는 데 도움이 된다.
# 예를 들어 X = 6일 때, 함수가 호출되는 과정을 그리면 다음과 같을 것이다.
# 확인해보면, 마찬가지로 f(2)와 같은 함수들이 동일하게 여러 번 호출되는 것을 알 수 있다.
# 이 문제에서 동일한 함수에서 구하는 값들은 동일해야 하므로 다이나믹 프로그래밍을 효과적으로 사용할 수 있다.
# 이제 문제에서 요구하는 내용을 점화식으로 표현해보자.
# 점화식 끝에 1을 더해주는 이유는 함수의 호출 횟수를 구해야 하기 때문이다.
# -->> "a(i) = min(a(i-1), a(i//2), a(i//3), a(i//5)) + 1"
# -->> 따라서 이 점화식을 토대로 "보텀업 다이나믹 프로그래밍"으로 소스코드를 작성해보자.
# 실제 코드를 구현할 때는 1을 빼는 연산을 제외하고는 해당 수로 나누어떨어질 때에 한해서만 점화식을 적용할 수 있다.
# 더불어 두 수 중에서 단순히 더 작은 수를 구하고자 할 때는 파이썬에서의 min() 함수를 이용하면 간단하다.

# 8-5.py 답안 예시
"""
# 정수 X를 입력받기
x = int(input())

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * (x + 1)

# 다이나믹 프로그래밍(Dynamic Programming) 진행(보텀업)
for i in range(2, x + 1):
    # 현재의 수에서 1을 빼는 경우
    d[i] = d[i - 1] + 1
    # 현재의 수가 2로 나누어 떨어지는 경우
    if i % 2 == 0:
        d[i] = min(d[i], d[i // 2] + 1)
    # 현재의 수가 3으로 나누어 떨어지는 경우
    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)
    # 현재의 수가 5로 나누어 떨어지는 경우
    if i % 5 == 0:
        d[i] = min(d[i], d[i // 5] + 1)

print(d[x])
"""
