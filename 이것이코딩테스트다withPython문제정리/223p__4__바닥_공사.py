# <4> 바닥 공사

# my solution
"""
n = int(input())
d = [0] * (1000 + 1)
d[1] = 1
d[2] = 3

for i in range(3, n + 1):
    d[i] = d[i - 2] * 2 + d[i - 1]

print(d[n] % 796796)
"""
# 문제 해설
# 이 문제 또한 마찬가지로 다이나믹 프로그래밍의 기초 예제에서 빠질 수 없는 타일링 문제 유형이다.
# 다이나믹 프로그래밍 문제에서는 종종 결과를 어떤 수로 나눈 결과를 출력하라는 내용이 들어가 있는 경우가 많다.
# 이 문제에서도 796,796으로 나눈 나머지를 출력하라고 하는데, 이는 단지 결괏값이 굉장히 커질 수 있기 때문에 그런 것이다.
# 따라서 값을 계산할 때마다 특정한 수로 나눈 나머지만 취하도록 하면 된다.
# 이 문제 또한 그림으로 그려서 생각하면 어렵지 않게 풀 수 있다. 예를 들어 N이 3일 때 바닥을 덮개로 채울 수 있는 모든 경우의 수는 다음과 같다.
# ....
# -->> 또한 왼쪽부터 차례대로 바닥을 덮개로 채운다고 생각하면 어렵지 않게 점화식을 세울 수 있다. -->> 즉, "보텀업 방식"을 이용해라..!!
# ....
# 또한 이 문제 역시 i번째 위치에 대한 최적의 해를 구할 때 왼쪽부터 (i -3)번째 이하의 위치에 대한 최적의 해에 대해서는 고려할 필요가 없다.
# 왜냐하면 사용할 수 있는 덮개의 형태가 최대 2 x 2크기의 직사각형 형태이기 때문이다.
# 다시 말해 채울 수 있는 형태는 위에서 언급한 경우밖에 없다. 따라서 다음과 같이 점화식을 세울 수 있다.
# -->> "a(i) = a(i-1) + 2 * a(i-2)"
# 왼쪽부터 N - 2까지 길이가 덮개로 이미 채워져 있는 경우 덮개를 채우는 방법은 2가지 경우가 있다.
# 이 두 방법은 서로 다른 것이므로, 결과적으로는 a(i)는 a(i-1) + a(i-2) + a(i-2)가 된다.
# 따라서 이를 간략히 ....

# 8-7.py 답안 예시
# 정수 N을 입력받기
n = int(input())

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 1001

# 다이나믹 프로그래밍(Dynamic Programming) 진행(보텀업)
d[1] = 1
d[2] = 3
for i in range(3, n + 1):
    d[i] = d[i - 2] * 2 + d[i - 1]

# 계산된 결과 출력
print(d[n])
