# another thoughts : 
# 참조 사이트 출처 : "https://m.blog.naver.com/jaeyoon_95/221762231876"

# "접근법"
# 재귀를 사용하여 코드를 작성하였습니다. start는 출발지, end는 목적지, mid는 start에서 end로 가기위한 중간점이라고 생각하면 됩니다..!!
# 원반이 두개일 경우 1-->>2, 1-->>3, 2-->>3 순으로 원반을 옮기고, 3개일 경우 1번 기둥에 있는 원반 3개 중 2개의 원반을 2번 기둥에 옮기고, 가장 큰 원반을 3번 기둥으로 옮깁니다. 두 개의 원반을 옮길 때는 1번 기둥에서 3번 기둥을 거쳐 2번 기둥으로 옮기게 됩니다.
# 마지막으로는 2번 기둥에 있는 원반들을 1번 기둥을 거쳐서 3번 기둥으로 옮기면 됩니다..!!

# 이를 일반화시키면 n개의 원반을 옮긴다고 하면, 1번 기둥에 있는 n-1개의 원반을 2번 기둥으로 옮기고, 1번 기둥에 남아 있는 가장 큰 원반을 3번 기둥으로 옮깁니다.
# 또한 2번 기둥에 있는 n-1개의 원반을 3번 기둥으로 옮기면 됩니다..!!
# 1. 원반이 1개일 경우는 그냥 1-->>3 만 해주면 됩니다. (재귀의 탈출조건이 됨..!!)
# 2. 원반이 2개 이상일 경우..!!
#   2-1. 1번 기둥에 있는 n개의 원반 중 n-1개를 2번 기둥으로 옮깁니다.(3번 기둥을 거쳐서)
#   2-2. 1번 기둥에 남아 있는 가장 큰 원반을 3번으로 옮깁니다.
#   2-3. 2번 기둥에 있는 n-1개의 원반을 이제 3번 기둥으로 옮깁니다.(1번 기둥을 거쳐서)
# 즉, 위의 방식으로 재귀를 이용하여 문제를 해결하면 됩니다..!!

# another solution을 변형한 my solution..!!
# -->> 다음에 다시 한번 풀어볼 것..!!

def hanoi(start, end, mid, n):
    if n == 1:
        return [[start, end]]
    
    return hanoi(start, mid, end, n-1) + [[start, end]] + hanoi(mid, end, start, n-1)

def solution(n):

    answer = hanoi(1, 3, 2, n)
    return answer

# print(solution(2))
