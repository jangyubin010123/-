# <Q02> 곱하기 혹은 더하기

# my solution

s = input() # -->> 출력결과 Ex : 02984
s = list(map(int, s))
# print(s) -->> 출력결과 Ex : [0, 2, 9, 8, 4]


answer = s[0]
i = 1
while i <= len(s) - 1:
    temp1 = answer * s[i]
    temp2 = answer + s[i]
    if temp1 >= temp2:
        answer *= s[i]
    else:
        answer += s[i]
    i += 1

print(answer)


# <A02> 곱하기 혹은 더하기
# 일반적으로 특정한 두 수에 대하여 연산을 수행할 때, 대부분은 "+"보다 "*"가 더 값을 크게 만든다. 예를 들어 5와 6이 있다고 해보자.
# 이때 더하기를 수행하면 5 + 6 = 11이 되고, 곱하기를 수행하면 5 * 6 = 30이 된다.
# 즉, 대부분의 경우에서는 곱하기를 수행한 결괏값이 더 크다.
# -->> 하지만 두 수 중에서 하나라도 "0" 혹은 "1"인 경우, 곱하기보다는 더하기를 수행하는 것이 효율적이다.
# 예를 들어 1과 2가 있다고 해보자. 이때 더하기를 수행하면 1 + 2 = 3이 되고, 곱하기를 수행하면 1 * 2 = 2가 된다.
# 다시 말해 -->> "두 수에 대하여 연산을 수행할 때, -->> 두 수 중에서 하나라도 1 이하인 경우에는 더하며, 두 수가 모두 2 이상인 경우에는 곱하면 된다."
# 이러한 원리를 이용하면 쉽게 문제를 해결할 수 있다.
# 문자열이 입력되었을 때 모든 숫자를 기준으로 나눈 뒤에, 
# 앞에서부터 연산을 수행하면 된다.
# 다시 말해 현재까지의 계산 결과를 result에 담은 상태로, 매 숫자에 대하여 연산을 수행하면 된다.
# 그래서 result가 1 이하이거나, 현재 처리하고 있는 숫자가 1 이하라면 더하기 연산을 수행하고, 그렇지 않은 경우 곱하기 연산을 수행하면 항상 최적의 결과를 얻을 수 있다.

# A02.py 답안 예시
"""
data = input()

# 첫 번째 문자를 숫자로 변경하여 대입
result = int(data[0])

for i in range(1, len(data)):
    # 두 수(-->> 즉, result 나 num 중에서..!!) 중에서 하나라도 "0" 혹은 "1"인 경우, 곱하기보다는 더하기 수행
    num = int(data[i])
    if result <= 1 or num <= 1:
        result += num
    else:
        result *= num

print(result)
"""
