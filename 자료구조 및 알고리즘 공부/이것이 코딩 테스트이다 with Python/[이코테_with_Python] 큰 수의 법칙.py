# <2> "큰 수의 법칙"

# my solution
"""
n, m, k = map(int, input().split())
arr = list(map(int, input().split()))
arr.sort(reverse = True)

max1 = arr[0] # 배열 arr내에서 가장 큰 수
max2 = arr[1] # 그다음으로 큰 수

cycle = [max1] * k + [max2] * 1 # <<-- 반복되는 한 사이클을 구해보자..!!
count = m // (k + 1)
remainder = m - (k + 1) * count

answer = sum(cycle) * count
# <==> answer = (max1 * k + max2 * 1) * count

for i in range(0, remainder):
    answer += cycle[i]

print(answer)
"""
# "문제 해설"
# 이 문제는 전형적인 그리디 알고리즘 문제로, 문제 해결을 위한 아이디어를 떠올리는 것은 어렵지 않은 편이다.
# 다만, 문제 해결을 위한 아이디어를 떠올렸어도 구현 실수로 인해 오답 처리를 받는 경우가 많은 문제이므로 꼭 직접 코드를 작성해보는 것을 권장한다.
# 이 문제를 해결하려면 일단 입력값 중에서 가장 큰 수와 두 번째로 큰 수만을 저장하면 된다.
# -->> "연속으로 더할 수 있는 횟수가 최대 K번이므로 "가장 큰 수를 K번 더하고 두번째로 큰 수를 한 번 더하는 연산"을 반복하면 된다."
# 이를 소스코드로 표현하면 다음과 같다.

# 단순하게 푸는 답안 예시
"""
# N, M, K를 공백으로 구분하여 입력받기
n, m, k = map(int, input().split())
# N개의 수를 공백으로 구분하여 입력받기
data = list(map(int, input().split()))

data.sort() # 입력받은 수들 정렬하기
first = data[n - 1] # 가장 큰 수
second = data[n - 2] # 두 번째로 큰 수

result = 0

while True:
    for i in range(k): # 가장 큰 수를 K번 더하기
        if m == 0: # m이 0이라면 반복문 탈출
            break
        result += first
        m -= 1 # 더할 때마다 1씩 빼기
    if m == 0: # m이 0이라면 반복문 탈출
        break
    result += second # 두 번째로 큰 수 한 번 더하기
    m -= 1 # 더할 때마다 1씩 빼기

print(result) # 최종 답안 출력
"""
# 이 문제는 M이 10_000 이하이므로 이 방식으로도 문제를 해결할 수 있지만, M의 크기가 100억 이상처럼 커진다면 시간 초과 판정을 받을 것이다.
# 간단한 수학적 아이디어를 이용해 더 효율적으로 문제를 해결해보자.
# 예를 들어 N이 5이고 입력값이 다음과 같이 주어졌다고 가정하자.
# [2, 4, 5, 4, 6]
# 이때 가장 큰 수와 두 번째로 큰 수를 선택하면 다음과 같다.
# * 가장 큰 수 : 6
# * 두번째로 큰 수 : 5
# 이때 M이 8이고, K이 3이라면 다음과 같이 더했을 때 합을 최대로 할 수 있다. 다시 말해 (6 + 6 + 6 + 5) + (6 + 6 + 6 + 5)로 정답은 46이 된다.
# ....
# 이 문제를 풀려면 가장 먼저 "반복되는 수열에 대해서 파악"해야 한다.
# 가장 큰 수와 두번째로 큰 수가 더해질 때는 특정한 수열 형태로 일정하게 반복해서 더해지는 특징이 있다.
# 위의 예시에서는 {6, 6, 6, 5}가 반복된다.
# 그렇다면 반복되는 수열의 길이는 어떻게 될까?
# 바로 (K + 1)로 위의 예시에서는 4가 된다. 따라서 M을 (K + 1)로 나눈 몫이 수열이 반복되는 횟수가 된다.
# 다시 여기에 K를 곱해주면 가장 큰 수가 등장하는 횟수가 된다.
# 이때 M이 (K + 1)로 나누어떨어지지 않는 경우도 고려해야 한다.
# 그럴 때는 M이 (K + 1)로 나눈 나머지만큼 가장 큰 수가 추가로 더해지므로 이를 고려해주어야 한다.
# 즉, "가장 큰 수가 더해지는 횟수"는 다음과 같다.
# -->> "int(M / (K + 1)) * K + M % (K + 1)"
# 결과적으로 위의 식을 이용하여 가장 큰 수가 더해지는 횟수를 구한 다음, 이를 이용해 두번째로 큰 수가 더해지는 횟수까지 구할 수 있는 것이다.
# 이를 토대로 파이썬을 이용해 답안을 작성하면 다음과 같다.

# 3-2.py 답안 예시
"""
# N, M, K를 공백으로 구분하여 입력받기
n, m, k = map(int, input().split())
# N개의 수를 공백으로 구분하여 입력받기
data = list(map(int, input().split()))

data.sort() # 입력받은 수 정렬
first = data[n - 1] # 가장 큰 수 
second = data[n - 2] # 두번째로 큰 수

# 가장 큰 수가 더해지는 횟수 계산
count = int(m / (k + 1)) * k
count += m % (k + 1)

result = 0
result += (count) * first # 가장 큰 수 더하기
result += (m - count) * second # 두번째로 큰 수 더하기

print(result) # 최종 답안 출력
"""
