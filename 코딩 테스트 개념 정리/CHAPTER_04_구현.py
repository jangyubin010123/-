# CHAPTER 04 > 구현
# 머릿속에 있는 알고리즘을 정확하고 빠르게 프로그램으로 작성하기

# <1> 아이디어를 코드로 바꾸는 구현

# 피지컬로 승부하기
# 코딩 테스트에서 '구현'이란 -->> '머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정'이다.
# ....
# 하지만 취업을 목표로 하는 코딩 테스트에서는 구현이 중심이 되는 문제가 자주 출제되기에 다른 알고리즘을 배우기 전에 먼저 다루고자 한다.
# ....
# 흔히 문제 해결 분야에서 구현 유형의 문제는 '풀이를 떠올리는 것은 쉽지만 -->> 소스코드로 옮기기 어려운 문제'를 의미한다.
# ....
# 그렇다면 어떤 문제가 구현하기 어려운 문제일까? -->> 알고리즘은 간단한데 코드가 지나칠 만큼 길어지는 문제, 특정 소수점 까지 출력해야 하는 문제
# , 문자열이 입력으로 주어졌을 때 한 문자 단위로 끊어서 리스트에 넣어야 하는 (파싱을 해야 하는) 문제 등이 까다로운 구현 유형의 문제라고 할 수 있다.
# 대체로 사소한 조건 설정이 많은 문제일수록 코드로 구현하기가 까다롭다. 물론 경험이 많은 프로그래머에게는 쉬울 수 있으나 초보자 입장에서는 프로그래밍 언어의
# 문법부터가 익숙하지 않기에 더 어렵게 느껴질 수 밖에 없다.
# 그렇기에 실제로 코딩 테스트에서 구현 문제를 만나면 당황할 수 있다. 어떻게 풀면 될지 대략 감은 오는데, 막상 코드로 옮기려니 무엇부터 작성해야 할지 모를 수 있기 때문이다.
# 또한 -->> 1. 프로그래밍 문법을 정확하게 숙지하지 못했거나, -->> 2. 라이브러리 사용 경험이 부족하면 구현 유형의 문제를 풀 때 불리하다.
# 예를 들어 파이썬으로 코딩 테스트에 응시했는데, N개의 원소가 들어 있는 리스트에서 R개의 원소를 뽑아 한 줄로 세우는 모든 경우(순열)를 구해야 하는 문제를 만나면 어떻게 해야 할까?
# 무작정 기능을 전부 작성할 수도 있다. -->> 하지만 파이썬의 itertools와 같은 표준 라이브러리로 쉽게 짜는 방법도 있다.
# 이는 언어의 문법을 잘 이해하고 경험이 있어야만 바로 떠올릴 수 있는 해결 방법이다.
# 이 책에서는 완전 탐색, 시뮬레이션 유형을 모두 '구현' 유형으로 묶어서 다루고 있다.
# "완전 탐색"은 -->> "모든 경우의 수를 주저 없이 다 계산하는 해결 방법"을 의미하고,
# "시뮬레이션"은 -->> "문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행"해야 하는 문제 유형을 의미한다.
# 둘 다 구현이 핵심이 되는 경우가 많기 때문에 이 두 유형을 모두 묶어서 구현 장에서 다루고 있다.
# ....
# 먼저 코딩 테스트 채점 시스템의 제약에 대해 설명한 후 문제를 다루겠다.

# 구현 시 고려해야 할 메모리 제약 사항
# ....
# 반면 파이썬에서는 프로그래머가 직접 자료형을 지정할 필요가 없으며 매우 큰 수의 연산 또한 기본으로 지원한다.
# 따라서 파이썬을 이용하는 독자라면 자료형의 표현 범위 제한에 대해 깊게 이해하고 있지 않아도 괜찮다. 실제로 기업 코딩 테스트뿐만 아니라 프로그래밍 대회에 참가할 떄에도
# 파이썬을 선택했다면 정수형 변수의 연산 때문에 머리 아프게 고민해야 할 일은 거의 없을 것이다.
# -->> 다만, 파이썬에서의 실수형 변수는 다른 언어와 마찬가지로 유효숫자에 따라서 연산 결과가 원하는 값이 나오지 않을 수 있다는 점을 기억하자.

# 파이썬에서의 리스트 크기
# ....
# 파이썬은 다른 언어에 비해서 구현상의 복잡함이 적은 편이지만 데이터 처리량이 많을 때는 꼭 메모리 제한을 고려하도록 하자.
# 리스트를 여러 개 선언하고, 그중에서 크기가 '1000만 이상인 리스트'가 '있다면' '메모리 용량 제한으로 문제를 풀 수 없게 되는 경우도 있다는 점을 기억하자.'
# -->> 하지만, 이런 문제 또한 드물다.
# ....
# 따라서 일반적인 코딩 테스트 수준에서는 메모리 사용량 제한보다 더 적은 크기의 메모리를 사용해야 한다는 점 정도만 기억하면 된다.
# 애초에 대회 문제가 아니라면 복잡한 최적화를 요구하지 않는 것이 일반적이므로 코딩 테스트에서는 이 정도만 기억해도 문제를 푸는 데는 어려움이 없다.
# 자세한 설명을 위해서는 컴퓨터 메모리 구조에 대해 언급해야 하는데, 이는 이 책의 범위를 넘어서기 때문에 간략히만 언급하였다.

# 채점 환경
# ....
# 보통 여러분이 접하는 코딩 테스트 환경에서는 다음과 같은 채점 시스템의 시간 제한 및 메모리 제한 정보가 적혀 있다.
# * 시간 제한 : 1초
# * 메모리 제한 : 128MB
# 파이썬은 C/C++에 비해 동작 속도가 느리다.
# ....
# -->> 2020년을 기준으로 파이썬 3.7로 코드를 작성할 때, -->> "자신의 코드가 1초에 2000만 번의 연산을 수행한다고 가정하고 문제를 풀면 실행 시간 제한에 안정적이다."
# ...., 일반적인 기업 코딩 테스트 환경에서는 파이썬으로 제출한 코드가 1초에 2000만 번의 연산을 수행한다고 가정하면 크게 무리가 없다는 점만 기억하자.
# 시간 제한이 1초이고, 데이터의 개수가 100만 개인 문제가 있다면 일반적으로 시간 복잡도 O(NlogN) 이내의 알고리즘을 이용하여 문제를 풀어야 한다. 실제로 N = 1,000,000일 때 NlogN은 약 20,000,000이기 때문이다.
# 따라서 알고리즘 문제를 풀 때는 시간 제한과 데이터의 개수를 먼저 확인한 뒤에 이 문제를 어느 정도의 시간 복잡도의 알고리즘으로 풀 수 있을 것인지 예측할 수 있어야 한다.

# 구현 문제에 접근하는 방법
# 보통 구현 유형의 문제는 사소한 입력 조건 등을 문제에서 명시해주며 문제의 길이가 꽤 긴편이다.
# 문제의 길이를 보고 지레 겁먹는데, -->> "고차원적인 사고력을 요구하는 문제는 나오지 않는 편이라 문법에 익숙하다면 오히려 쉽게 풀 수 있다."
# ....
# 반면 파이썬은 기본 문법만 알아도 상대적으로 구현 유형의 문제를 쉽게 해결할 수 있다.
# 구현 측면에서 ....
# ....
# 이 말은 코딩 테스트에서 Pypy3를 선택한다면 파이썬3와 동일한 코드를 제출해서 실행 시간을 줄일 수 있다는 의미이다.
# ....
# 하지만 일반적으로 C/C++는 고려해야 할 사항이 많아 초보자에게는 쉽지 않다.
# -->> "API 개발 문제 또한 구현 유형과 상당히 맞닿아 있다." 예를 들어 카카오 공채 때 API 개발 문제가 출제된 적이 있는데, 이때 카카오 문제 풀이 서버와 통신하는 프로그램 모듈을 작성해야 했다.
# 이는 알고리즘 문제와 별개로 웹 서버나 데이터 분석에 대한 기초 지식도 필요하다. 이런 기능을 구현해야 할 때, .... 파이썬은 매우 간결하고 직관적인 코드의 라이브러리를 사용할 수 있어 더 유리하다.
# 파이썬을 사용한다면 API 개발 문제를 보더라도 상대적으로 무난하게 대처할 수 있을 것이다.
# 이제 구현 알고리즘의 대표적인 예시인 '상하좌우' 문제와 '시각' 문제를 풀어보려 한다. 2문제를 가볍게 읽은 다음 2절의 실전 문제를 풀어보자.

# [예제 4-1] 상하좌우

# my solution
"""
n = int(input())
move = list(input().split())
start = [1,1]

for m in move:
    if m == "R":
        if start[1] == n:
            continue
        start[1] += 1
    elif m == "L":
        if start[1] == 1:
            continue
        start[1] -= 1
    elif m == "U":
        if start[0] == 1:
            continue
        start[0] -= 1
    elif m == "D":
        if start[0] == n:
            continue
        start[0] += 1

print(start[0], start[1])
"""

# 문제 해설
# 이 문제를 요구사항대로 구현하면 연산 횟수는 이동 횟수에 비례하게 된다. 예를 들어 이동 횟수가 N번인 경우 시간 복잡도는 O(N)이다.
# 따라서 이 문제의 시간 복잡도는 매우 넉넉한 편이다.
# -->> 이러한 문제는 일련의 명령에 따라서 개체를 차례대로 이동시킨다는 점에서 시뮬레이션 유형으로 분류되며 구현이 중요한 대표적인 문제 유형이다.
# 다만, 알고리즘 교재나 문제 풀이 사이트에 따라서 다르게 일컬을 수 있으니 코딩 테스트에서의 시뮬레이션 유형, 구현 유형, 완전 탐색 유형은 서로 유사한 점이 많다는 정도로만 기억하자.
# 코딩 테스트나 알고리즘 대회에서 가장 난이도가 가장 낮은 1 ~ 2번 문제는 -->> 대부분 '그리디 알고리즘'이나 '구현 문제'이다.
# 이 두 유형이 논리적 사고력을 확인할 수 있는 가장 기본적인 난이도의 문제로 적합하기 때문이다.
# 난이도가 낮은 만큼 합격을 좌우하는 중요한 문제이기도 하다.

# 4-1.py 답안 예시
"""
# N을 입력받기
n = int(input())
plans = list(input().split())
x, y = 1, 1

# L, R, U, D에 따른 이동 방향
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move_types = ['L','R','U','D']

nx, ny = 0, 0

# 이동 계획을 하나씩 확인
for plan in plans:
    # 이동 후 좌표 구하기
    for i in range(len(move_types)):
        if plan == move_types:
            nx = x + dx[i] # 'nx' means 'new x'
            ny = y + dy[i] # 'ny' means 'new y'
    # 공간을 벗어나는 경우 무시
    if nx < 1 or ny < 1 or nx > n or nx > n:
         continue
    # 이동 수행
    x, y = nx, ny
    # print(x, y)
print(x, y)
"""

# [예제 4-2] 시각

# my solution
"""
n = int(input())
answer = 0

for h in range(0, n + 1):
    for m in range(0, 59 + 1):
        for s in range(0, 59 + 1):
            if '3' in str(h) + str(m) + str(s):
                answer += 1
            else:
                continue
print(answer)
"""

# 문제 해설
# 이 문제는 모든 시각의 경우를 하나씩 모두 세서 쉽게 풀 수 있는 문제다.
# 왜냐하면 하루는 86400초로, ....
# 다시 말해 경우의 수가 100,000개도 되지 않으므로 파이썬에서 문자열 연산을 이용해 3이 시각에 포함되어 있는지 확인해도 시간 제한 2초안에 문제를 해결할 수 있다.
# 따라서 단순히 시각을 1씩 증가시키면서 3이 하나라도 포함되어 있는지 확인하면 될 것이다.
# .... 3중 반복문을 이용해 계산할 수 있다.
# 이러한 유형은 -->> "완전 탐색(Brute Forcing)유형으로 분류"되기도 한다. 완전 탐색 알고리즘은 가능한 경우의 수를 모두 검사해보는 탐색 방법이다.
# 완전 탐색 문제 또한 구현이 중요한 대표적인 문제 유형인데,
# 일반적으로 완전 탐색 알고리즘은 비효율적인 시간 복잡도를 가지고 있으므로 데이터 개수가 큰 경우에 정상적으로 동작하지 않을 수 있다.
# 그래서 일반적으로 알고리즘 문제를 풀 때는 확인(탐색)해야 할 전체 데이터 개수가 100만 개 이하일 때 완전 탐색을 사용하면 적절하다.
# 다음 소스 코드에서는 매 시각을 문자열로 바꾼 다음 문자열에 '3'이 포함됐는지 검사한다.
# ....
# ....

# 4-2.py 답안 예시
"""
# H를 입력받기
h = int(input())

count = 0
for i in range(0, h + 1):
    for j in range(60):
        for k in range(60):
            # 매 시각 안에 '3'이 포함되어 있다면 카운트 증가
            if '3' in str(i) + str(j) + str(k):
                count += 1

print(count)
"""

# 이제 실전 문제를 풀어보자. '구현 문제 유형'은 앞장에서 공부했던 '그리디 알고리즘 문제 유형'과 '비교했을 때' '큰 차이가 느껴지지 않을 수도 있다.'
# 애초에 구현 유형과 그리디 유형은 별개가 아니라 하나의 문제에 구현 유형과 그리디 유형이 함꼐 포함된 형태로 출제되는 경우가 많기 때문이다.
# 3장에서 언급했듯이 하나의 문제에는 여러 개의 문제 유형이 포함되는 경우가 많다.

# <2> 왕실의 나이트

# my solution
"""
start_v = input()
new_v = [0,0] # 아스키 코드 값을 담을 길이가 2인 리스트(배열)의 선언이다..!!
moves = [(1,2),(1,-2),(-1,2),(-1,-2), (2,1),(2,-1),(-2,1),(-2,-1)]
answer = 0

for move in moves:
    new_v[0] = ord(start_v[0]) + move[0]
    new_v[1] = ord(start_v[1]) + move[1]

    if 'a' <= chr(new_v[0]) <= 'h' and '1' <= chr(new_v[1]) <= '9':
        answer += 1
    else:
        continue

print(answer)
"""

# 문제 해설
# 왕실의 나이트 문제는 앞서 다루었던 예제 4-1 '상하좌우'문제와 유사하다.
# 나이트가 이동할 수 있는 경로를 하나씩 확인하여 이동하면 된다.
# 다만, 8 x 8 좌표 평면을 벗어나지 않도록 꼼꼼하게 검사하는 과정이 필요하다.
# ....
# ....
# 이 과정은 반복문으로 처리할 수 있다.
# 조금 더 까다롭게 문제를 출제한다면 입력 문자가 열과 행이 아닌 1a와 같은 행과 열 형태로 들어왔을 때의 예외 처리를 요구할 수도 있다.
# 이런 다양한 구현 유형에 대비하기 위해서 파이썬 문법을 자유롭게 사용할 수 있도록 훈련하는 것이 중요하다.
# ....

# 4-3.py 답안 예시
"""
# 현재 나이트의 위치 입력받기
input_data = input()
row = int(input_data[1])
column = int(ord(input_data[0])) - int(ord('a')) + 1 # -->> 즉, 'a'를 입력받았다면 column의 값은 1이 됩니다..!!

# 나이트가 이동할 수 있는 8가지 방향 정의
steps = [(-2,-1), (-1,-2), (1,-2), (2,-1), (2,1), (1,2), (-1,2), (-2,1)]

# 8가지 방향에 대하여 각 위치로 이동이 가능한지 확인
result = 0
for step in steps:
    # 이동하고자 하는 위치 확인
    next_row = row + step[0]
    next_column = column + step[1]
    # 해당 위치로 이동이 가능하다면 카운트 증가
    if 1 <= next_row <= 8 and 1 <= next_column <= 8:
        result += 1

print(result)
"""

# 참고로 앞서 '상하좌우'문제에서는 dx, dy 리스트를 선언하여 이동할 방향을 기록할 수 있도록 하였다.
# 이번 소스코드에서는 steps 변수가 dx와 dy 변수의 기능을 대신하여 수행한다. 2가지 형태 모두 자주 사용되므로, 참고하도록 하자.

# <3> 게임 개발

# my solution -->> "시간 초과..!!" -->> 다음 번에 다시 풀어볼 것..!!
"""
n , m = map(int,input().split())
x, y, d = map(int,input().split())
array = [[0] * m for _ in range(n)]

for i in range(n):
    array[i] = list(map(int,input().split()))
# <<-- 일단, 여기까지 ok..!!

answer = 0
turn_time = 0
while True:
    # 1. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향(반시계 방향으로 90도 회전한 방향)부터 차례대로 갈 곳을 정한다.
    # 왼쪽 회전
    if turn_time == 4:
        if d == 0:
            pass
        elif d == 1:
            pass
        elif d == 2:
            pass
        elif d == 3:
            pass
    d -= 1
    if d == -1:
        d = 3
    # 시뮬레이션 시작..!!
    answer += 1 # 처음 시작한 위치가 주어지면 -->> 그 위치는 방문한 위치가 되기 때문입니다..!!
    array[x][y] = 2 # 현민이가 방문한 위치를 2로 해줍시다..!!
    
    if d == 0:
        if array[x-1][y] == 0 : # 참고> 방향 회전 후, 정면에 놓여 있는 앞의 칸을 기준으로 하는 것 같습니다..!!
            d = 3
            x, y = x-1, y
            array[x][y] = 2
            turn_time = 0
        else: # 왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.
            d = 3
            turn_time += 1
            continue
    elif d == 1:
        if array[x][y - 1] == 0:
            d = 0
            x, y =  x, y - 1
            array[x][y] = 2
            turn_time = 0
        else:
            d = 0
            turn_time += 1
            continue
    elif d == 2:
        if array[x + 1][y] == 0:
            d = 1
            x, y =  x + 1, y
            array[x][y] = 2
            turn_time = 0
        else:
            d = 1
            turn_time += 1
            continue
    elif d == 3:
        if array[x][y + 1] == 0:
            d = 2
            x, y =  x, y + 1
            array[x][y] = 2
            turn_time = 0
        else:
            d = 2
            turn_time += 1
            continue
"""

# 문제 해설
# -->> 전형적인 시뮬레이션 문제다. 삼성전자 공채 코딩 테스트에서 자주 출제되는 대표적인 유형이기도 하다.
# -->> 별도의 알고리즘이 필요하기보다는 문제에서 요구하는 내용을 오류 없이 성실하게 구현만 할 수 있다면 풀 수 있다는 특징이 있다.
# -->> 다만, 문제가 길고 문제를 바르게 이해하여 소스코드를 옮기는 과정이 간단하지 않다. 따라서 이러한 문제를 잘 풀 수 있도록 반복적인 숙달이 필요하다
# 문제 풀이를 위한 테크닉을 다시 설명하자면, -->> 일반적으로 방향을 설정해서 이동하는 문제 유형에서는 -->> "dx, dy라는 별도의 리스트를 만들어 방향을 정하는 것이 효과적이다."
# 예를 들어 현재 캐릭터가 북쪽을 바라보고 있을 떄는 북쪽으로 이동하기 위해 x와 y좌표를 각각 dx[0], dy[0]만큼 더한다.
# 다시 말해 현재 위치에서 (-1, 0)만큼 이동시키는 것이다. 이처럼 코드를 작성하면, 반복문을 이용하여 모든 방향을 차례대로 확인할 수 있다는 점에서 유용하다..!!
# 그리고 답안 예시 코드에서는 리스트 컴프리헨션 문법을 사용해 2차원 리스트를 초기화했다.
# 파이썬에서 2차원 리스트를 선언할 때는 컴프리헨션을 이용하는 것이 효율적이라는 점을 기억하자.
# 이에 대한 자세한 내용은 부록 A에서 확인할 수 있다.
# -->> 왼쪽으로 회전하는 함수 turn_left()에서 global 키워드를 사용했는데, 이는 정수형 변수인 direction 변수가 함수 바깥에서 선언된 전역 변수이기 때문이다..!!

# 4-4.py 답안 예시
# N, M을 공백으로 구분하여 입력받기
n, m = map(int, input().split())

# 방문한 위치를 저장하기 위한 맵을 생성하여 0으로 초기화
d = [[0] * m for _ in range(n)]
# 현재 캐릭터의 X 좌표, Y 좌표, 방향을 입력받기
x, y, direction = map(int, input().split())
d[x][y] = 1 # 현재 좌표 방문 처리

# 전체 맵 정보를 입력받기
array = []
for i in range(n):
    array.append(list(map(int, input().split())))

# 북, 동, 남, 서 방향 정의
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1] 

# 왼쪽으로 회전
def turn_left():
    global direction
    direction -= 1
    if direction == -1:
        direction = 3

# 시뮬레이션 시작
count = 1 # 현재 좌표 방문 처리
turn_time = 0
while True:
    # 왼쪽으로 회전
    turn_left()
    nx = x + dx[direction]
    ny = y + dy[direction]
    # 회전한 이후 정면에 가보지 않은 칸이 존재하는 경우 이동
    if d[nx][ny] == 0 and array[nx][ny] == 0: # 즉, 육지이면서 아직 가보지 않은 칸일 경우입니다..!!
        d[nx][ny] = 1
        x = nx
        y = ny
        count += 1
        turn_count = 0 # 다른 칸으로 이동 완료했으므로 turn_count를 다시 0으로 초기화 해줍시다..!!
        continue # -->> 다 마친 후 1단계로 돌아가줍시다..!!
    # 회전한 이후 정면에 가보지 않은 칸이 없거나 바다인 경우
    else:
        turn_time += 1
    # 네 방향으로 모두 갈 수 없는 경우
    if turn_time == 4:
        if d == 0:
            nx = x
            ny = y - 1
        elif d == 1:
            nx = x - 1
            ny = y
        elif d == 2:
            nx = x
            ny = y + 1
        elif d == 3:
            nx = x + 1
            ny = y
        # 뒤로 갈 수 있다면 이동하기
        if array[nx][ny] == 0:
            x = nx
            y = ny
            count += 1 # <-- 이 경우에도 결국 방문한 행동이라고 볼 수 있기 때문입니다..!!
        # 뒤가 바다로 막혀 있는 경우
        else:
            break
        turn_time = 0

# 정답 출력
print(count)

        


